const fs = require('fs');

try {
  // Read the Markdown file generated by code-context-llm
  const markdownContent = fs.readFileSync('MyProjectStructure.md', 'utf8');

  // Create a simple structure to represent code context
  const codeContext = {
    projectName: "SwatStockConsole",
    files: [],
    description: "A console application for retrieving and displaying stock data"
  };

  // Parse the Markdown to extract file information
  const lines = markdownContent.split('\n');
  let currentFile = null;
  let collectingCode = false;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    // Detect file sections
    if (line.includes('.cs (') && line.trim().endsWith('bytes)')) {
      // Extract filename from line like "    - DailyPriceData.cs (215 bytes)"
      const match = line.match(/\s*-\s*([\w\/\.]+\.cs)\s*\((\d+) bytes\)/);
      if (match) {
        const [_, fileName, size] = match;
        currentFile = {
          path: fileName,
          size: parseInt(size),
          content: "",
          previewFound: false
        };
        codeContext.files.push(currentFile);
      }
    }

    // Look for content preview
    if (currentFile && line.trim() === "Content preview:") {
      collectingCode = true;
      currentFile.previewFound = true;
      i++; // Skip the "```" line
      continue;
    }

    // Collect code content from preview section
    if (collectingCode && currentFile && currentFile.previewFound) {
      if (line === "```") {
        collectingCode = false;
      } else {
        currentFile.content += line + "\n";
      }
    }
  }

  // Write converted data to JSON file
  fs.writeFileSync('code-context.json', JSON.stringify(codeContext, null, 2));
  console.log("Successfully converted Markdown to JSON");

} catch (error) {
  console.error("Error processing Markdown file:", error);
  process.exit(1);
}
